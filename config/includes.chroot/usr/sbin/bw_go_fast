#!/bin/bash

function cleanup {
    logger "[BW] phew, turning off things...";

    # unpark cores & switch to powersave governor
    BASE_CPU_PATH="/sys/devices/system/cpu/"
    N_CORES=$(nproc --all)

    for ((i = 0; i <= (N_CORES-1); i++)); do
        cpu_path="$BASE_CPU_PATH/cpu$i"
        gov_path="$cpu_path/cpufreq/scaling_governor"
        online_path="$cpu_path/online"
        if [ -f $gov_path ]; then
            echo "powersave" > $gov_path
        fi

        if [ -f $online_path ]; then
            echo "1" > $online_path
        fi
    done

    # Now onto the GPU settings:
    # find the AMD card
    gpu_path="/sys/class/drm/card"

    # check an unreasonable number of GPUs
    for ((i = 0; i <= 8; i++)); do
        device="$gpu_path$i/device"
        vendor="$device/vendor"
        # if it's a good path & it's an AMD card, do the thing
        if [[ -f $vendor && $(tr -cd 0-9 < $vendor) == '01002' ]]; then
            echo "auto" > "$device/power_dpm_force_performance_level"
            #echo "0" > "$device/pp_dpm_mclk"
            # this implicitly happens?
            echo "0" > "$device/pp_power_profile_mode"
        fi
    done

}

trap cleanup EXIT
# turn on settings such that programs will (hopefully) run stutter-free
# this should run as part of LightDM's display-setup-script, so that
# it runs as root

# things to try:
# 1. Set performance gov for cpus (done by gamemode)
#    echo "performance" > /sys/devices/system/cpu/cpu${cpu}/cpufreq/scaling_governor
# 2. Park E cores (not relevant to BW servers, but upstairs? servers are 9th gen, and P/E started in 12th)
# 3. (pinning cores should be done by application?)
# 4. 

# inspiration comes from:
# gamemode (which some programs will call anyway)
# https://gitlab.freedesktop.org/drm/amd/-/issues/1500

# look for /sys/class/drm/cardX/device/vendor = 0x1002
# for whatever reason, the servers have integrated graphics
# that shows up *before* the AMD card
# and also for whatever reason, we never get a card0, which
# is weird?

# some of the users in the amdgpu issue use udev rules
# to set modes, but then it'd be active all the time, even
# when all users are logged out?

logger "[BW] Running up the electricity bill...";

# park cores by setting /sys/devices/system/cpu/cpu<#>/online to '0'
# Assume cpu0 is always a P core (and can't generally be disabled anyway)
BASE_CPU_PATH="/sys/devices/system/cpu/"
N_CORES=$(nproc --all)
P_FREQ=0
for ((i = 0; i <= (N_CORES-1); i++)); do
    # if we don't have the cpufreq dir, then nothing we can do
    # might be a VM or WSL?
    cpu_path="$BASE_CPU_PATH/cpu$i"
    clk_path="$cpu_path/cpufreq/cpuinfo_max_freq"
    gov_path="$cpu_path/cpufreq/scaling_governor"
    online_path="$cpu_path/online"
    if [ -f $gov_path ]; then
        # all cores get the performance governor (presumably the sleeping cores
        # don't contribute anything?)
        echo "performance" > $gov_path
        # the first CPU core should be a P core,
        # so we'll use its max freq to determine
        # whether subsequent cores are P or E.

        if [ $i == 0 ]; then
            if [ -f $clk_path ]; then
                P_FREQ=$(tr -cd 0-9 < $clk_path)
            fi

        # park the core?
        elif [ -f $online_path ]; then # not the first core
            # if P_FREQ is 0, assume we can't actually tell
            # whether something's a P or E core
            # (also e.g. in WSL, no /cpufreq/ is available)
            # skip if online is unavailable
            this_freq=$(tr -cd 0-9 < $clk_path)
            if (( this_freq > P_FREQ )); then
                logger "[BW] Max frequency $this_freq on CPU$i was higher than $P_FREQ on CPU0! Weird..."
                continue
            fi
            # the threshold is sort of arbitrary. On my test machine,
            # the E cores are ~75% of the max P freq
            # on an internet post, there are some P cores that are a hair
            # slower than the fastest, and the E cores are like 50%
            if (( P_FREQ > 0 && $(echo "($P_FREQ*0.8)/1" | bc) > this_freq )); then
                # this is probably an E core, so let's try to park it?
                # thanks to https://github.com/FeralInteractive/gamemode/blob/c54d6d4243b0dd0afcb49f2c9836d432da171a2b/util/cpucorectl.c#L85
                echo "0" > $online_path
                logger "[BW] Parked CPU$i"
            fi
        fi

    fi # end cpu setting
done

# at this point, all P cores should be "performance" governed
# and all E cores should be parked.

# Now onto the GPU settings:
# find the AMD card
gpu_path="/sys/class/drm/card"

# check an unreasonable number of GPUs
for ((i = 0; i <= 8; i++)); do
    device="$gpu_path$i/device"
    vendor="$device/vendor"
    # if it's a good path & it's an AMD card, do the thing
    if [[ -f $vendor && $(tr -cd 0-9 < $vendor) == '01002' ]]; then
        echo "manual" > "$device/power_dpm_force_performance_level"
        echo "3" > "$device/pp_dpm_mclk"
        echo "2" > "$device/pp_dpm_sclk"
        echo "5" > "$device/pp_power_profile_mode" # compute mode
    fi
done

# wait until done. When exiting, cleanup should be called?
sleep infinity
