#!/bin/python3

import os
import sys
from glob import glob

# this should be a systemd thing that happens early, before
# graphics are actually ready

# also ensure that the fastest refresh rate is being used
xorg_name = '/etc/X11/xorg.conf.d/90-bw.conf'

xorg_conf_template = '''
# auto-generated by bw_make_xorg

Section "ServerLayout"
  Identifier    "BW-Dual-Display"
  Screen 0      "Screen0" 0 0
  Screen 1      "Screen1" RightOf "Screen0"
EndSection

Section "Monitor"
  Identifier    "{disp1}"
  Option "DPMS" "off"
  VertRefresh 55-65
EndSection

Section "Monitor"
  Identifier    "{disp2}"
  Option "DPMS" "off"
  VertRefresh 55-150
EndSection

Section "Device"
  Identifier  "Card0"
  Driver      "amdgpu"
  Option      "ZaphodHeads" "{disp1}"
  Option      "Monitor-{disp1}" "{disp1}"
  Screen 0
EndSection

Section "Device"
  Identifier  "Card1"
  Driver      "amdgpu"
  Option      "ZaphodHeads" "{disp2}"
  Option      "Monitor-{disp2}" "{disp2}"
  Screen 1
EndSection

Section "Screen"
  Identifier    "Screen0"
  Device        "Card0"
  Monitor       "{disp1}"
  DefaultColorDepth 24
  Subsection "Display"
    Depth 24
    Modes  "1920x1080"
  EndSubSection
EndSection

Section "Screen"
  Identifier    "Screen1"
  Device        "Card1"
  Monitor       "{disp2}"
  DefaultColorDepth 24
  Subsection "Display"
    Depth 24
    Modes  "1920x1080"
  EndSubSection
EndSection
'''

xorg_conf_single_template = '''
# auto-generated by bw_make_xorg

Section "ServerLayout"
  Identifier    "BW-Single-Display"
  Screen 0      "Screen0" 0 0
EndSection

Section "Monitor"
  Identifier    "{disp1}"
  Option "DPMS" "off"
  VertRefresh 55-365
EndSection

Section "Device"
  Identifier  "Card0"
  Driver      "amdgpu"
  Option      "Monitor-{disp1}" "{disp1}"
  Screen 0
EndSection

Section "Screen"
  Identifier    "Screen0"
  Device        "Card0"
  Monitor       "{disp1}"
  DefaultColorDepth 24
  Subsection "Display"
    Depth 24
    Modes  "1920x1080"
  EndSubSection
EndSection

'''


def remove_old_xorg_confs():
    try:
        os.remove(xorg_name)
    except FileNotFoundError:
        pass


if __name__ == '__main__':
    # if single screen, do nothing (& remove any active xorg config)? Or
    # should we still try to set such that we can target the proper refresh rate,
    # e.g. with the 360hz displays?
    print('[BW] Generating a new xorg.conf.')
    # figure out which GPU has inputs plugged in
    base_gpu_path = '/sys/class/drm/card'
    amd_idx = None
    for i in range(8):
        venduh = base_gpu_path + str(i) + '/device/vendor'
        try:
            with open(venduh, 'r') as f:
                x = f.readline().strip()
            
            if x == '0x1002':
                amd_idx = i
                break
    
        except FileNotFoundError:
            pass
        
    if amd_idx is None:
        print('[BW] No amd gpu found, exiting...')
        remove_old_xorg_confs()
        sys.exit(1)
    
    # now we know the number of the amdgpu
    # next, we'll check how many outputs are connected

    # TODO: fail if multiple GPUs have active connections
    common = f'/sys/class/drm/card{amd_idx}-'
    lc = len(common)
    out_paths = glob(f'{common}*')
    connections = []
    for op in out_paths:
        with open(op + '/status', 'r') as f:
            is_connected = f.readline().strip() == 'connected'
        
        # save unique part of the name if it's connected (e.g. DP-6)
        if is_connected:
            connections.append(op[lc:])

    # maybe there's an amdgpu, but nothing's connected?
    if len(connections) < 1:
        print('[BW] No connections to amdgpu, exiting...')
        remove_old_xorg_confs()
        sys.exit(1)
    
    # we have exactly one connection
    # if len(connections) == 1:
    #     print('[BW] Only one connection, no xorg.conf needed...')
    #     remove_old_xorg_confs()
    #     sys.exit(0)
    
    # last weird condition-- 3+ displays
    if len(connections) > 2:
        print('[BW] This was not designed for >2 displays, exiting...')
        remove_old_xorg_confs()
        sys.exit(1)
    
    # ok, 1-2 displays
    disp_mapping = dict.fromkeys(connections)

    # now we can look at /sys/kernel/debug/dri/<x>/state to see what's connected
    disp_keys = list(disp_mapping.keys())

    with open(f'/sys/kernel/debug/dri/{amd_idx}/state', 'r') as f:
        while True:
            line = f.readline().strip()
            if not line:
                break
            
            for ky in disp_keys:
                if ky in line:
                    # get the next line, and find the crtc
                    line2 = f.readline().strip()
                    # the name x wants is assumed to be x-1
                    xid = int(ky[-1]) - 1
                    disp_mapping[ky] = {'crtc': int(line2[-1]),
                                        'xname': f'DisplayPort-{xid}'}
    
    # check we made it out with 1-2 crtcs
    crtc_map = {}
    for ky in disp_mapping:
        dct = disp_mapping[ky]
        if dct is None:
            print('[BW] Failed to find at least one display, exiting...')
            remove_old_xorg_confs()
            sys.exit(1)
        crtc_map[dct['crtc']] = dct['xname']

    # write the xorg config
    if len(crtc_map) == 1:
        with open(xorg_name, 'w') as f:
            f.write(xorg_conf_single_template.format(disp1=crtc_map[0]))
    else:
        with open(xorg_name, 'w') as f:
            f.write(xorg_conf_template.format(disp1=crtc_map[0], disp2=crtc_map[1]))
